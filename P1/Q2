a. O engenheiro-chefe comumente submete consultas que retornam as despesas com valor igual a R$100.000,00

CREATE INDEX idx_despesa_valor
on despesa
USING hash(valor);

Nesse caso, deve-se utilizar o índice de tipo hash pois a consulta deseja retornar um match exato.

Também é possível utilizar o script Python para ordenar o campo valor da tabela despesa. 
Dessa forma, ao realizar a busca, será possível descartar com segurança todos os valores que estejam antes ou depois ao conjunto de linhas que possuem valor = R$100.000,00

b. Existe uma rotina de controle de projeto que precisa do total de despesas de um dado projeto a partir do seu valor de IdProjeto.

CREATE INDEX idx_projeto_id
on projeto
USING hash(IdProjeto);

Nesse caso, deve-se utilizar o índice de tipo hash pois a consulta deseja retornar um match exato.

Também é possível utilizar o script Python para ordenar o campo IdProjeto da tabela projeto e a partir disso executar um método de busca eficiente como a Busca Binária, que precisa receber uma lista de valores ordenados.

c. Ao final de cada mês é gerado um relatório apresentando o total de despesas por projeto da cidade do Rio de Janeiro

CREATE INDEX idx_projeto_cidade
on projeto
USING hash(cidade);

Nesse caso, deve-se utilizar o índice de tipo hash pois a consulta deseja retornar um match exato.

Também é possível utilizar o script Python para ordenar o campo cidade da tabela projeto, organizando a coluna em ordem alfabética e a partir disso executar um método de busca eficiente como a Busca Binária, que precisa receber uma lista de valores ordenados.

d. Os dados da tabela Despesa são usados diariamente por rotinas analíticas que fazem cruzamentos de dados e respondem perguntas como: "Há despesas de material de consumo pagas pela contratante (TipoDespesa = 'Contratante')?"

CREATE INDEX idx_despesa_tipo
on despesa
USING hash(tipoDespesa);

Nesse caso, deve-se utilizar o índice de tipo hash pois a consulta deseja retornar um match exato.

Quantos aos aspectos como consumo de espaço em disco e desempenho de operações de INSERT, UPDATE e DELETE, pode-se destacar que:
    - Quanto ao espaço em disco: Os índices que serão criados, se forem criados de forma eficiente, ocuparão menos espaço em disco do que o conjunto inteiro de dados. 
    - Quanto ao desempenho: 
        - INSERT: índices podem ajudar a encontrar com mais eficiência o local em que um novo dado deve ser inserido, porém, dependendo da inserção, a reorganização do índice pode ser custosa. 
        - UPDATE: índices podem ajudar a encontrar com mais eficiência o dado que deve ser atualizado, porém, dependendo da atualização, a reorganização do índice pode ser custosa.
        - DELETE: índices podem ajudar a encontrar com mais eficiência o dado que deve ser excluído, porém, dependendo da remoção, a reorganização do índice pode ser custosa.
    
        Ambas as operações podem tanto se beneficiar quanto se prejudicar quando índices são usados, a depender do grau de reorganização que o índice deverá sofrer após a execução do método.
